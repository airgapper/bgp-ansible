router id 165.254.255.2;

protocol kernel {
	persist;
	scan time 20;
	import all;
	export all;
}

protocol device {
	scan time 10;
}

protocol direct {
	interface "virbr0";
	interface "eth1";
	interface "lo";
	interface "tardis6";
	interface "sit1";
}

protocol bfd bfd1 {
}

protocol static {
	route 2001:728:1808::/48 unreachable;
	route 2001:67c:208c::/48 via 2001:728:1808::8;
}

include "generic.conf";

protocol bgp ibgp {
	description "ibgp";
	local as 15562;
	neighbor 2001:728:1808::1 as 15562;
	source address 2001:728:1808::2;
	direct;
	bfd on;
	import all;
	export all;
}

protocol bgp tardis1 {
	disabled on;
	neighbor 2001:728:1808:1::26 as 15562;
	source address 2001:728:1808:1::25;
	local as 15562;
	direct;
	rr client;
	bfd on;
	next hop self;
	import filter {
		if net ~ [ 2001:67c:208c:10::/64, 2001:728:1808:1::20/126 ] then accept;
		reject;
	};
	export all;
}

protocol bgp ircd1 {
	description "backend.ams.irc.nlnog.net";
	local as 15562;
	neighbor 2001:728:1808::32 as 15562;
	source address 2001:728:1808::2;
	direct;
	import filter {
		if ( net = 2001:728:1808:2::132/128 ) then accept;
		reject;
	};
	export none;
}

function reject_bogon_prefixes()
prefix set bogons;
prefix set acceptable_sizes;
prefix set below_dfz_boundry;
{
	below_dfz_boundry = [ 2000::/3{49,128} ];
	acceptable_sizes = [ 2000::/3{12,48} ];
	bogons = [
		0000::/8{8,128},  		/* loopback, unspecified, v4-mapped */
		0064:ff9b::/96{96,128},  	/* RFC 6052 - IPv4-IPv6 Translation */
		0100::/8{8,128},  		/* RFC 4291 - Reserved by IETF */
		0100::/64{64,128},  		/* RFC 6666 - reserved for Discard-Only Address Block */
		0200::/7{7,128},  		/* RFC 4048 - Reserved by IETF */
		0400::/6{6,128},  		/* RFC 4291 - Reserved by IETF */
		0800::/5{5,128},  		/* RFC 4291 - Reserved by IETF */
		1000::/4{4,128},  		/* RFC 4291 - Reserved by IETF */
		2001::/33{33,128},  		/* RFC 4380 - Teredo prefix */
		2001:0:8000::/33{33,128},  	/* RFC 4380 - Teredo prefix */
		2001:0002::/48{48,128},  	/* RFC 5180 - Benchmarking */
		2001:0003::/32{32,128},  	/* RFC 7450 - Automatic Multicast Tunneling */
		2001:10::/28{28,128},  		/* RFC 4843 - Deprecated ORCHID */
		2001:20::/28{28,128},  		/* RFC 7343 - ORCHIDv2 */
		2001:db8::/32{32,128},  	/* RFC 3849 - NON-ROUTABLE range to be used for documentation purpose */
		2002::/16{16,128},  		/* RFC 3068 - 6to4 prefix */
		3ffe::/16{16,128},  		/* RFC 5156 - used for the 6bone but was returned */
		4000::/3{3,128},  		/* RFC 4291 - Reserved by IETF */
		5f00::/8{8,128},  		/* RFC 5156 - used for the 6bone but was returned */
		6000::/3{3,128},  		/* RFC 4291 - Reserved by IETF */
		8000::/3{3,128},  		/* RFC 4291 - Reserved by IETF */
		a000::/3{3,128},  		/* RFC 4291 - Reserved by IETF */
		c000::/3{3,128},  		/* RFC 4291 - Reserved by IETF */
		e000::/4{4,128},  		/* RFC 4291 - Reserved by IETF */
		f000::/5{5,128},  		/* RFC 4291 - Reserved by IETF */
		f800::/6{6,128},  		/* RFC 4291 - Reserved by IETF */
		fc00::/7{7,128},  		/* RFC 4193 - Unique Local Unicast */
		fe80::/10{10,128},  		/* RFC 4291 - Link Local Unicast */
		fec0::/10{10,128},  		/* RFC 4291 - Reserved by IETF */
		ff00::/8{8,128}  		/* RFC 4291 - Multicast */
	];
	if (net ~ below_dfz_boundry) then {
		print "reject_bogon_prefixes() protocol ", proto, " Small prefix, adding NO_EXPORT community: ", net, " path: ", bgp_path;
		bgp_community.add((65535, 65281));
	} else if !(net ~ acceptable_sizes) then {
		print "reject_bogon_prefixes() protocol ", proto, " Too large or too small prefix: ", net, " path: ", bgp_path;
		reject;
	}
	if (net ~ bogons) then {
		print "reject_bogon_prefixes() protocol ", proto, " bogon prefix: ", net, " path: ", bgp_path;
		reject;
	}
}

template bgp ntt {
	local as 15562;
	hold time 180;
	startup hold time 240;
	connect retry time 120;
	keepalive time 80;
	connect delay time 5;
	error wait time 60, 300;
	error forget time 300;
	next hop self;
	allow local as 1;
	import filter {
		bgp_med = 0;
		accept;
		bgp_large_community.delete((15562,0,1));
	};
	export filter {

		if ( net = 2001:67c:208c::/48 ) then {
			bgp_large_community.add ((15562,1,1));
			accept;
		}

		if ( net ~ [
				2001:728:1808::/48,
				2a04:ec40:ff24::/48,
				2001:067c:1b43::/48
		] ) then {
			bgp_community.add ((65535,65281));
			accept;
		}
		if ( net = 2001:728:1808:2::132/128 ) then {
			bgp_path.prepend(15562);
			bgp_community.add ((65535,65281));
			accept;
		}

		# downstream routes
		if ( (15562,0,1) ~ bgp_large_community ) then {
			accept;
		}
		reject;
	};
}

protocol bgp NTT2 from ntt {
	description "NTT 2";
	neighbor 2001:728:0:5000::a91 as 2914;
	source address 2001:728:0:5000::a92;
}

include "rpki-data.ipv6.conf";

template bgp downstream {
	local as 15562;
	import keep filtered;
	import none;
	export all;
	direct;
	next hop self;
}

filter AS31451_import
prefix set AS31451;
int set AS31451_origins;
{
	include "filters/AS31451.ipv6.conf";
	include "filters/AS31451.origins.conf";
	reject_bogon_asns();
	reject_bogon_prefixes();
	reject_rpki_invalid();
	if !(bgp_path.last ~ AS31451_origins) then {
		print "AS31451_import() protocol ", proto, " Origin AS ", bgp_path.last, " not in IRR AS-KING: ", net, " path: ", bgp_path;
		reject;
	}
	if (net ~ AS31451) then {
		bgp_large_community.add((15562,0,1));
		accept;
	}
	print "AS31451_import() protocol ", proto, " prefix not in IRR AS-KING: ", net, " path: ", bgp_path;
	reject;
}

protocol bgp king1 from downstream {
	neighbor 2001:728:1808:1::1e as 31451;
	source address 2001:728:1808:1::1d;
	import filter AS31451_import;
}

protocol bgp kiera1 {
	local as 15562;
	neighbor 2001:728:1808::26 as 15562;
	source address 2001:728:1808::2;
	import none;
	export all;
	rr client;
}



